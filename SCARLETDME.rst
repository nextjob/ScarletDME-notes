**********
ScarletDME
**********
 

From the  `ScarletDME
website <https://scarlet.deltasoft.com/index.php/Main_Page>`__

"ScarletDME is a OpenSource MultiValue database, a community fork of
OpenQM originally developed by Ladybridge. This project was founded on
the 28th November 2008 to independently develop future versions of
ScarletDME and contribute to OpenQM. While there are no longer regular
official releases from Ladybridge we aim to support and develop for
Scarlet to help our commercial sister, While providing a Free and open
platform for Multi value development"

The code shown in the following notes was realeased under the following copyright:

 Copyright (c) 2007 Ladybridge Systems, All Rights Reserved

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software Foundation,
 Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
 Ladybridge Systems can be contacted via the www.openqm.com web site.
 

High level:

The ScarletDME system operates as a  Virtual Machine.  The system
executes stored precompiled bytecode (objects) generated by a compiler
(BCOMP) and interpreted by the Virtual Machine (Kernel). There is a
little more discussion found in the quoted text in the `pcode
file <PCODE.html>`__ section.

 

I like this synopsis: 
`https://en.wikipedia.org/wiki/Interpreter_(computing)#Bytecode_interpreters <https://en.wikipedia.org/wiki/Interpreter_(computing)#Bytecode_interpreters>`__ 

 

"There is a spectrum of possibilities between interpreting and
compiling, depending on the amount of analysis performed before the
program is executed.  For example, Emacs Lisp is compiled to bytecode,
which is a highly compressed and optimized representation of the Lisp
source,   but is not machine code (and therefore not tied to any
particular hardware).   This "compiled" code is then interpreted by a
bytecode interpreter (itself written in C).   The compiled code in this
case is machine code for a virtual machine, which is implemented not in
hardware, but in the bytecode interpreter.   In a bytecode interpreter
each instruction starts with a byte, and therefore bytecode interpreters
have up to 256 instructions, although not all may be used.   Some
bytecodes may take multiple bytes, and may be arbitrarily complicated."

 

Also see:

*<*\ https://en.wikipedia.org/wiki/Bytecode\ *>*  (Pick BASIC is listed
as an example)

*<*\ https://en.wikipedia.org/wiki/P-code_machine\ *>* 

*<*\ https://en.wikipedia.org/wiki/Stack_machine\ *>* 

 

 

**Major Components / Subsystems**:

 

**Written in C:**

 

`QM <QM.html>`__ - Scarlet Main Executable  ../ScarletDME/gplsrc/qm.c 

`KERNEL <KERNEL.html>`__ - Virtual Machine ../ScarletDME/gplsrc/kernel.c

 

 

**Written in BASIC and interpreted via the Kernel:**
 

`CPROC <CPROC.html>`__ - Interactive Terminal Command Processor ../ScarletDME/GPL.BP/CPROC


`VBSRVR <VBSRVR.html>`__  - QMCLIENT Command processor ../ScarletDME/GPL.BP/VBSRVR


`BASIC <BASIC.html>`__ - BASIC compiler ../ScarletDME/GPL.BP/BCOMP


 

**Other Notes:**

 

The `OP Code Object <OPCODE.html>`__

`Network Connections, stdin, stdout and  xinetd <NETWORKING.html>`__

Special Notes on `BASIC compile of internal modules <BASIC.html>`__.

`Program Variables (Virtual Machine) <PROGRAM_VARS.html>`__.

`User Table <UserTable.html>`__.

`Evaluation Stack <EvaluationStack.html>`__.

`qmEngine project <qmEngineProcess.html>`__.